"""
Creates a CSV file with all the unique instances of misclassifications in the input file
(which should be generated by saving the output of the misses evaluation method)

@copyright: The Broad Institute of MIT and Harvard 2015
"""

import csv, argparse
import collections

parser = argparse.ArgumentParser()
parser = argparse.ArgumentParser()
parser.add_argument("-i", "--input", nargs=1, default=["./out/misses.txt"],
                    help="File containing misclassification report")
parser.add_argument("-o", "--output", nargs=1, default=["./out/misses.csv"],
                    help="File containing list of unique misclassification instances")
args = parser.parse_args()

input_filename = args.input[0]
output_filename = args.output[0]

var_file = "./data/variables.txt"
vars = []
with open(var_file, "rb") as vfile:
    for line in vfile.readlines():
        line = line.strip()
        if not line: continue
        vars.append(line.split()[0])

cases = {}

with open(input_filename, "r") as txtfile:
    lines = txtfile.readlines()
    open_case = {}
    for line in lines:
        line = line.strip()
        if line == "********************************************": break
        if line == "----------------":
            open_case = {}
        else:
            parts = line.split(" ")
            if parts[0] == "Name:": continue
            if parts[0] == "META:":
                id = parts[1].split(",")[1]
                cases[id] = open_case
            else:
                key = parts[0]
                val = parts[len(parts) - 1]
                open_case[key] = val


data = []
cases = collections.OrderedDict(sorted(cases.items()))
for id in cases:
    row = [id]
    print id
    for v in vars: 
        s = str(float(cases[id][v]))
        row.append(s)
    data.append(row) 

with open(output_filename, "w") as csvfile:
    writer = csv.writer(csvfile, delimiter=",", quotechar='"', quoting=csv.QUOTE_MINIMAL)
    titles = ["ID"]
    titles.extend(vars)
    writer.writerow(titles)
    for row in data: writer.writerow(row)
